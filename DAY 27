51
N-Queens

class Solution {
public:
vector<vector<string>>an;
vector<string>ans;
bool isPossible(int n,int row,int column)
{
    for(int i=row-1;i>=0;i--)
    {
      if(ans[i][column]=='Q')
      return false;
    }
    for(int i=row-1,j=column-1;i>=0 && j>=0;i--,j--)
    {
        if(ans[i][j]=='Q')
      return false;
    }
    for(int i=row-1,j=column+1;i>=0 && j<n;i--,j++)
    {
        if(ans[i][j]=='Q')
      return false;
    }
    return true;
}
void nQueenHelper(int n,int row)
{
    if(row==n){
      an.push_back(ans);
      return;
}
    for(int j=0;j<n;j++){
    if(isPossible(n,row,j)){
      ans[row][j] = 'Q';
      nQueenHelper(n,row+1);
      ans[row][j] = '.';
    }
  }
  return;
}
    vector<vector<string>> solveNQueens(int n) {
     for(int i=0;i<n;i++)
      {string s;
        for(int j=0;j<n;j++)
        s+='.';
        ans.push_back(s);
      }
        nQueenHelper(n,0);
        return an;
    }
};
